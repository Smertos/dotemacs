#+TITLE:  Smertos' Emacs Config
#+AUTHOR: Mikhail Vedernikov
#+EMAIL:  misha.smert@gmail.com
* General Configuration
** Get path to .emacs.d directory
Create variable contaning path to .emacs.d directory
#+BEGIN_SRC emacs-lisp
(setq dotfiles-dir (file-name-directory (or (buffer-file-name) load-file-name)))
#+END_SRC

** Raise limits for Emacs
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 50000000)
(setq gnutls-min-prime-bits 4096)
#+END_SRC

** Set some variables
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t      ; Enable Org formatting preview
      custom-file (make-temp-file "") ; idk
      echo-keystroke 0.1              ; Instant keystoke preview
      inhibit-startup-message t       ; No trashscreen at the start
      inhibit-scratch-message t       ; do not create empty scratch buffer
      sentence-end-double-space nil   ; ??
      gc-cons-threshold 50000000      ; ??
      gnutls-min-prime-bits 4096      ; ??
      default-tab-width 4)

(setq-default truncate-lines t                  ; Don't split line into multiple... or do?
              indent-lines-mode nil             ; Dunno what it does
              split-width-threshold 160         ; vertical win
              split-height-threshold nil        ; splitting
              tab-width 4
              tab-stop-list (number-sequence 4 200 4)
              indent-tabs-mode nil)
#+END_SRC

** Set UTF-8 as default encoding
#+BEGIN_SRC emacs-lisp
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
#+END_SRC

** Transparently open compressed files
#+BEGIN_SRC emacs-lisp
(auto-compression-mode t)
#+END_SRC

** Enable syntax highlighting for older Emacsen that have it off
#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

** Save a list of recent files visited
#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
#+END_SRC

** Highlight matching parentheses when the point is on them
#+BEGIN_SRC emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode 1)
#+END_SRC

** Define alias for reverting a file
#+BEGIN_SRC emacs-lisp
(defalias 'auto-revert-tail-mode 'tail-mode)
#+END_SRC

** Disable unnecessary stuff
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(global-linum-mode -1)
#+END_SRC

** Turn on selection highlighting
#+BEGIN_SRC emacs-lisp
(transient-mark-mode 1)
#+END_SRC

** Y/n instead of Yes/no
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Better centered scrolling
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 10000)
(setq scroll-preserve-screen-position t)
#+END_SRC

** Ignore disabled functions
#+BEGIN_SRC emacs-lisp
(setq disabled-command-function nil)
#+END_SRC

** De-Indentation
Allows to remove 4 spaces from the beginning of the string
#+BEGIN_SRC emacs-lisp
(defun deindent ()
  (interactive)
  (save-excursion
    (save-match-data
      (beginning-of-line)
      ;; get rid of tabs at beginning of line
      (when (looking-at "^\\s-+")
        (untabify (match-beginning 0) (match-end 0)))
      (when (looking-at "^  ? ? ?")
        (replace-match "")))))

(global-set-key (kbd "<backtab>") 'deindent)
#+END_SRC

** Disable auto fill
#+BEGIN_SRC emacs-lisp
(auto-fill-mode -1)
#+END_SRC

** Backups
Redirect all backups into special directory
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC

** Rebinds
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x u") 'undo-only)
#+END_SRC

** Set custom font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Iosevka-11"))
(add-to-list 'default-frame-alist '(height . 24))
(add-to-list 'default-frame-alist '(width . 80))
#+END_SRC

* Packages
 Preparation config and some base packages
** Enable use-package
Used by every package for easy installation
Ensures in portability of config
#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

Ensure all packages gets installed
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC

** i3wm compatability
#+BEGIN_SRC emacs-lisp
(use-package i3wm)
#+END_SRC

** Editor Theme - gruvbox
#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme :init (load-theme 'gruvbox-dark-medium t))
#+END_SRC

** Exec PATH from shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (exec-path-from-shell-initialize)
            (setq exec-path-from-shell-check-startup-files nil))
#+END_SRC


All the packages
** Aggressive indent
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent :hook (prog-mode . aggressive-indent-mode))
#+END_SRC

** All the icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

** Company
Install the company mode
#+BEGIN_SRC emacs-lisp
(use-package company :config (global-company-mode +1))
#+END_SRC

Install lsp addon
#+BEGIN_SRC emacs-lisp
(use-package company-lsp
  :after (company lsp-mode)
  :config (push 'company-lsp company-backends)
          (setq company-lsp-async t))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard :init (dashboard-setup-startup-hook))
#+END_SRC

** Flycheck
Install the flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck)
#+END_SRC

** Highlight indent guide
Highlights indentation in code
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :config (setq highlight-indent-guides-method 'column)
  :hook (prog-mode . highlight-indent-guides-mode))
#+END_SRC
 
** Ivy
#+BEGIN_SRC emacs-lisp
(defun my-ivy-config ()
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))

(use-package counsel)
(use-package counsel-projectile)
(use-package ivy :config (my-ivy-config))
(use-package swiper)
#+END_SRC

** JS2
#+BEGIN_SRC emacs-lisp
(use-package js2-mode)
#+END_SRC

** JSON
#+BEGIN_SRC emacs-lisp
(use-package json-mode)
#+END_SRC

** LSP
Install the mode first
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :after (lsp-mode flycheck)
  :hook (lsp-mode . lsp-ui-mode))
#+END_SRC

Backends:
*** CSS
#+BEGIN_SRC emacs-lisp
(use-package lsp-css
  :after (lsp-mode)
  :hook ((css-mode . (lambda () (when (eq major-mode 'css-mode) (lsp-css-enable))))
         ((sass-mode scss-mode) . lsp-scss-enable)
         (less-mode . lsp-less-enable)))
#+END_SRC

*** HTML
#+BEGIN_SRC emacs-lisp
(use-package lsp-html
  :after (lsp-mode)
  :hook (html-mode . lsp-html-enable))
#+END_SRC

*** Javascript/Typescript
Install lsp client for javascript-typescript
#+BEGIN_SRC emacs-lisp
(use-package lsp-javascript-typescript
  :after (lsp-mode js2-mode typescript-mode)
  :hook ((js-mode js2-mode typescript-mode) . lsp-javascript-typescript-enable))
#+END_SRC

Javascript-typescript-langserver doesn't take into account the completion prefix, which causes some glitchy completion when using company.
lsp-javascript-typescript doesn't handle this yes; for now the following can be used as a fix
#+BEGIN_SRC emacs-lisp
(defun my-company-transformer (candidates)
  (let ((completion-ignore-case t))
    (all-completions (company-grab-symbol) candidates)))

(defun my-js-hook nil
  (make-local-variable 'company-transformers)
  (push 'my-company-transformer company-transformers))

(add-hook 'js-mode-hook 'my-js-hook)
(add-hook 'typescript-mode-hook 'my-js-hook)
#+END_SRC

** Magit
Best Git UI ever.
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

** Powerline
Install the powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline)
(use-package spaceline :after powerline)
(use-package spaceline-all-the-icons
  :after (all-the-icons powerline spaceline)
  :config (spaceline-all-the-icons-theme)
          (spaceline-all-the-icons-toggle-slim))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config (projectile-mode t)
          (setq projectile-require-project-root nil))
#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :hook (org-mode . org-bullets-mode)
        (org-mode . org-indent-mode))
(use-package org-beautify-theme :after (org gruvbox-theme) :init (load-theme 'org-beautify t))
(use-package org-bullets :after org)
(use-package ox-ioslide :after org)
(use-package ox-twbs :after org)
#+END_SRC

*** Setup keywords and their colors
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO" "IN-PROGRESS" "HOLD" "WAITING STAGE" "STAGE" "WAITING PRE" "PRE" "|" "DONE")))
(setq org-todo-keywords-faces '(("TODO" . "blue")
                                ("HOLD" . "magenta")
                                ("IN-PROGRESS" . "red")
                                ("WAITING STAGE" . "lightorange")
                                ("STAGE" . "orange")
                                ("WAITING PRE" . "lightyellow")
                                ("PRE" . "yellow")
                                ("DONE" . "green")))
#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens)
#+END_SRC

** Typescript
Install the mode for typescript
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode)
#+END_SRC

** Web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode :init (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config (yas-global-mode 1)
          (setq yas-snippet-dirs '("~/.emacs.d/snippets")))
(use-package yasnippet-snippets :after yasnippet)
#+END_SRC

